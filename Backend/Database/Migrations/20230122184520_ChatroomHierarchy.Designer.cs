// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20230122184520_ChatroomHierarchy")]
    partial class ChatroomHierarchy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatroomUser", b =>
                {
                    b.Property<Guid>("ChatroomsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatroomsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ChatroomUser");
                });

            modelBuilder.Entity("Entities.Chatrooms.Chatroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastMessageTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Chatroom");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Chatroom");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChatroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatroomId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PublicChatroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Token")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PublicChatroomId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Chatrooms.PrivateChatroom", b =>
                {
                    b.HasBaseType("Entities.Chatrooms.Chatroom");

                    b.HasDiscriminator().HasValue("PrivateChatroom");
                });

            modelBuilder.Entity("Entities.Chatrooms.PublicChatroom", b =>
                {
                    b.HasBaseType("Entities.Chatrooms.Chatroom");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OwnerId");

                    b.HasDiscriminator().HasValue("PublicChatroom");
                });

            modelBuilder.Entity("ChatroomUser", b =>
                {
                    b.HasOne("Entities.Chatrooms.Chatroom", null)
                        .WithMany()
                        .HasForeignKey("ChatroomsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Message", b =>
                {
                    b.HasOne("Entities.Chatrooms.Chatroom", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChatroomId");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Chatrooms.PublicChatroom", null)
                        .WithMany("Moderators")
                        .HasForeignKey("PublicChatroomId");
                });

            modelBuilder.Entity("Entities.Chatrooms.PublicChatroom", b =>
                {
                    b.HasOne("Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Entities.Chatrooms.Chatroom", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Entities.Chatrooms.PublicChatroom", b =>
                {
                    b.Navigation("Moderators");
                });
#pragma warning restore 612, 618
        }
    }
}
