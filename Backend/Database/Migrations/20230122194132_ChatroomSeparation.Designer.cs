// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20230122194132_ChatroomSeparation")]
    partial class ChatroomSeparation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Chatrooms.PrivateChatroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastMessageTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PrivateChatroom");
                });

            modelBuilder.Entity("Entities.Chatrooms.PublicChatroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastMessageTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PublicChatroom");
                });

            modelBuilder.Entity("Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PrivateChatroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PublicChatroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PrivateChatroomId");

                    b.HasIndex("PublicChatroomId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Token")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PrivateChatroomUser", b =>
                {
                    b.Property<Guid>("PrivateChatroomsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrivateChatroomsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PrivateChatroomUser");
                });

            modelBuilder.Entity("PublicChatroomUser", b =>
                {
                    b.Property<Guid>("PublicChatroomsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PublicChatroomsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PublicChatroomUser");
                });

            modelBuilder.Entity("Entities.Message", b =>
                {
                    b.HasOne("Entities.Chatrooms.PrivateChatroom", null)
                        .WithMany("Messages")
                        .HasForeignKey("PrivateChatroomId");

                    b.HasOne("Entities.Chatrooms.PublicChatroom", null)
                        .WithMany("Messages")
                        .HasForeignKey("PublicChatroomId");
                });

            modelBuilder.Entity("PrivateChatroomUser", b =>
                {
                    b.HasOne("Entities.Chatrooms.PrivateChatroom", null)
                        .WithMany()
                        .HasForeignKey("PrivateChatroomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PublicChatroomUser", b =>
                {
                    b.HasOne("Entities.Chatrooms.PublicChatroom", null)
                        .WithMany()
                        .HasForeignKey("PublicChatroomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Chatrooms.PrivateChatroom", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Entities.Chatrooms.PublicChatroom", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
